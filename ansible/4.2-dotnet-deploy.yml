---

- name: Download Repository and Publish Project
  hosts: dotnet_apps
  vars:
    ansible_user: "{{ usr_name }}"
  tasks:
    - name: Clone Private Repositories
      delegate_to: build
      git:
        repo: "{{ dotnet_repo }}"
        dest: "~/src/{{ inventory_hostname }}/"
        force: yes
        key_file: "~/.ssh/{{ dotnet_repo_deploy_key }}" # required for private repos
        accept_newhostkey: yes # if the host key isn't trusted, module fails with misleading permissions issue
      when: dotnet_repo_deploy_key is defined

    - name: Clone Public Repositories
      delegate_to: build
      git:
        repo: "{{ dotnet_repo }}"
        dest: "~/src/{{ inventory_hostname }}/"
        force: yes
      when: dotnet_repo_deploy_key is not defined
  
#     - name: Create and Save Build Artifacts
#       command: "dotnet publish -c Release -o /tmp/{{ project_name }}/"
#       args:
#         chdir: "~/src/{{ project_name }}/"

#     - name: Compress Published Output Directory
#       archive:
#         path: /tmp/{{ project_name }}/
#         dest: "~/{{ project_name }}.tgz"

#     - name: Fetch File and Save on Control Node
#       fetch:
#         src: "~/{{ project_name }}.tgz"
#         dest: "/tmp/{{ project_name }}.tgz"
#         flat: yes

#   vars:
#     project_name: CollatzRazorPage
#   tasks:
#     - name: Create Folder for Executable Files
#       file:
#         path: "/usr/local/bin/{{ project_name }}"
#         state: directory
#         owner: "{{ usr_name }}"
#         group: "{{ usr_name }}"

# - name: Retreive Project
#   hosts: collatz
#   vars:
#     ansible_user: "{{ usr_name }}"
#     project_name: CollatzRazorPage
#   tasks:
#     - name: Unarchive Project File (Saved on Controller Node)
#       unarchive:
#         src: "/tmp/{{ project_name }}.tgz"
#         dest: "/usr/local/bin/{{ project_name }}"

# - name: Create Service File and Start Service
#   hosts: collatz
#   vars:
#     project_name: CollatzRazorPage
#   tasks:

#     - name: Copy the Service File
#       template:
#         src: collatz.service
#         dest: "/etc/systemd/system/collatzapp.service"

#     - name: Restart App Service
#       systemd:
#         name: collatzapp
#         state: restarted
#         enabled: yes
